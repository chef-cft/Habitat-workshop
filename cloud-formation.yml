AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation script to setup the Habitat Lab environment'
Parameters:
  KeyName:
    Description: Name of an existing EC2 key pair for ssh access
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 key pair
Resources:
  LinuxWorkstation:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.medium
      SecurityGroups: [!Ref 'WorkstationSG']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-03da490f2f0b9e2b9'
      UserData:
        Fn::Base64: |
          #!/bin/bash -xe
          exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
          hostname "workstation"
          echo "export HAB_CTL_SECRET=/Z8aLDvtTxLySDdVfFS8uKFZM5TsJnaxO/9F+PfXbAzKnWxZB9hbeYYlVnGfwxj/Sd7vKWs4YIRFwhCtLdq1qg==" >> /home/ubuntu/.profile
          echo "export HAB_Origin=edge" >> /home/ubuntu/.profile
          cat <<EOT>> /etc/systemd/system/vscode.service
          [Unit]
          Description=VSCode Server
          [Service]
          User=ubuntu
          Group=ubuntu
          ExecStart= /home/ubuntu/openvscode-server-v1.72.2-linux-x64/bin/openvscode-server --connection-token "f4e1d044-f420-4342-af66-f3ca098e9c46" --host 0.0.0.0
          [Install]
          WantedBy=default.target
          EOT
          wget https://github.com/gitpod-io/openvscode-server/releases/download/openvscode-server-v1.72.2/openvscode-server-v1.72.2-linux-x64.tar.gz -P /home/ubuntu
          tar xvzf /home/ubuntu/openvscode-server-v1.72.2-linux-x64.tar.gz
          systemctl start vscode
      Tags:
      - Key: Name
        Value: 'Workshop Workstation'
      - Key: X-Dept
        Value: 'SA'
      - Key: X-Application
        Value: 'Habitat'
      - Key: X-Contact
        Value: "donald.slanec@progress.com"
      - Key: X-Production
        Value: "True"
      - Key: X-Project
        Value: "Hab"
  Automate:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: m4.xlarge
      SecurityGroups: [!Ref 'AutomateSG']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-03da490f2f0b9e2b9'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 80
      Tags:
      - Key: Name
        Value: 'Automate'
      - Key: X-Dept
        Value: 'SA'
      - Key: X-Application
        Value: 'Habitat'
      - Key: X-Contact
        Value: "donald.slanec@progress.com"
      - Key: X-Production
        Value: "True"
      - Key: X-Project
        Value: "Hab"
  Store1Device1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroups: [!Ref 'HabSG']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-03da490f2f0b9e2b9'
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
                #!/bin/bash -xe
                exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                hostname "device1"
                curl https://raw.githubusercontent.com/habitat-sh/habitat/main/components/hab/install.sh | sudo bash
                hab license accept
                cat <<EOT>> /etc/systemd/system/hab.service
                [Unit]
                Description=The Chef Habitat Supervisor
                [Service]
                ExecStart=/bin/hab sup run --listen-ctl=0.0.0.0:9632 --event-stream-application="POS" --event-stream-environment="production" --event-stream-site="Store 1" --event-stream-url="${automate}:4222" --event-stream-token="LqktmByrx-5rH_FaIG7zS6icxMk="
                [Install]
                WantedBy=default.target
                EOT
                systemctl start hab
            - automate: !GetAtt Automate.PrivateDnsName

      Tags:
      - Key: Name
        Value: 'Store 1 Device 1'
      - Key: X-Dept
        Value: 'SA'
      - Key: X-Application
        Value: 'Habitat'
      - Key: X-Contact
        Value: "donald.slanec@progress.com"
      - Key: X-Production
        Value: "True"
      - Key: X-Project
        Value: "Hab"
  Store1Device2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroups: [!Ref 'HabSG']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-03da490f2f0b9e2b9'
      Tags:
      - Key: Name
        Value: 'Store 1 Device 2'
      - Key: X-Dept
        Value: 'SA'
      - Key: X-Application
        Value: 'Habitat'
      - Key: X-Contact
        Value: "donald.slanec@progress.com"
      - Key: X-Production
        Value: "True"
      - Key: X-Project
        Value: "Hab"
  Store2Device1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroups: [!Ref 'HabSG']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-03da490f2f0b9e2b9'
      Tags:
      - Key: Name
        Value: 'Store 2 Device 1'
      - Key: X-Dept
        Value: 'SA'
      - Key: X-Application
        Value: 'Habitat'
      - Key: X-Contact
        Value: "donald.slanec@progress.com"
      - Key: X-Production
        Value: "True"
      - Key: X-Project
        Value: "Hab"
  Store3Device1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroups: [!Ref 'HabSG']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-03da490f2f0b9e2b9'
      Tags:
      - Key: Name
        Value: 'Store 3 Device 1'
      - Key: X-Dept
        Value: 'SA'
      - Key: X-Application
        Value: 'Habitat'
      - Key: X-Contact
        Value: "donald.slanec@progress.com"
      - Key: X-Production
        Value: "True"
      - Key: X-Project
        Value: "Hab"
  Store3Device2:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      SecurityGroups: [!Ref 'HabSG']
      KeyName: !Ref 'KeyName'
      ImageId: 'ami-03da490f2f0b9e2b9'
      Tags:
      - Key: Name
        Value: 'Store 3 Device 2'
      - Key: X-Dept
        Value: 'SA'
      - Key: X-Application
        Value: 'Habitat'
      - Key: X-Contact
        Value: "donald.slanec@progress.com"
      - Key: X-Production
        Value: "True"
      - Key: X-Project
        Value: "Hab"
  WorkstationSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Linux WorkstationSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
  AutomateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Linux WorkstationSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 4222
          ToPort: 4222
          CidrIp: 0.0.0.0/0
  HabSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG for Linux WorkstationSG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9632
          ToPort: 9632
          CidrIp: 0.0.0.0/0
Outputs:
  AutomateDNSName:
    Description: The public DNS Name of Chef Automate
    Value: !GetAtt Automate.PublicDnsName